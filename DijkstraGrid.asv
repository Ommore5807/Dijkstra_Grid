function [route,numExpanded] = DijkstraGrid (input_map, start_coords, dest_coords)


%Map array for colour of each type of the grid.


cmap = [1 1 1; ...
    0 0 0; ...
    1 0 0; ...
    0 0 1; ...
    0 1 0; ...
    1 1 0;
    0.5 0.5 0.5];

colormap(cmap);

% variable to control if the map is being visualized on every
% iteration
drawMapEveryTime = true;

[nrows, ncols] = size(input_map);

% map - a table that keeps track of the state of each grid cell
map = zeros(nrows,ncols);

map(~input_map) = 1;   % Mark free cells
map(input_map)  = 2;   % Mark obstacle cells

% Generate linear indices of start and dest nodes
start_node = sub2ind(size(map), start_coords(1), start_coords(2));
dest_node  = sub2ind(size(map), dest_coords(1),  dest_coords(2));

map(start_node) = 5;
map(dest_node)  = 6;

% Initialize distance array
distanceFromStart = Inf(nrows,ncols);

% For each grid cell this array holds the index of its parent
parent = zeros(nrows,ncols);

distanceFromStart(start_node) = 0;

% keep track of number of nodes expanded
numExpanded = 0;

v = VideoWriter('dijkstra_expansion.mp4');  
v.FrameRate = 10;   % frames per second
open(v);

% Main Loop
while true

    % Draw current map
    map(start_node) = 5;
    map(dest_node) = 6;

    % make drawMapEveryTime = true if you want to see how the
    % nodes are expanded on the grid.
    if (drawMapEveryTime)
        image(1.5, 1.5, map);
        grid on;
        axis image;
        drawnow;
    end

    % Find the node with the minimum distance
    [min_dist, current] = min(distanceFromStart(:));


    if ((current == dest_node) || isinf(min_dist))
        break;
    end;

    % Update map
    map(current) = 3;         % mark current node as visited
    distanceFromStart(current) = Inf; % remove this node from further consideration

    % Compute row, column coordinates of current node
    [i, j] = ind2sub(size(distanceFromStart), current);



    ii=0;
    jj=0;
    if (i>1 && i<=nrows)
        ii = i-1;
        jj = j;
        if (map(ii,jj)~=2 && map(ii,jj)~=3) && map(ii,jj) ~= 5
            cost = 1;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end

    if (i>=1 && i<nrows)
        ii = i+1;
        jj = j;
        if (map(ii,jj)~=2 && map(ii,jj)~=3) && map(ii,jj) ~= 5
            cost = 1;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end
    if (j>1 && j<=ncols)
        jj = j-1;
        ii = i;
        if (map(ii,jj)~=2 && map(ii,jj)~=3 ) && map(ii,jj) ~= 5
            cost = 1;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end
    if (j>=1 && j<ncols)
        jj =j+1;
        ii = i;
        if (map(ii,jj)~=2 && map(ii,jj)~=3) && map(ii,jj) ~= 5
            cost = 1;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end

    % Diagonal moves (cost = 1.5)

    % top-left
    if (i>1 && j>1) && map((i-1),(j))~=2 && map((i),(j-1))~=2
        ii = i-1; jj = j-1;
        if (map(ii,jj)~=2 && map(ii,jj)~=3 ) && map(ii,jj) ~= 5
            cost = 1.5;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end

    % top-right
    if (i>1 && j<ncols) && map((i-1),(j))~=2 && map((i),(j+1))~=2
        ii = i-1; jj = j+1;
        if (map(ii,jj)~=2 && map(ii,jj)~=3 ) && map(ii,jj) ~= 5
            cost = 1.5;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end

    % bottom-left
    if (i<nrows && j>1) && map((i+1),(j))~=2 && map((i),(j-1))~=2
        ii = i+1; jj = j-1;
        if (map(ii,jj)~=2 && map(ii,jj)~=3 ) && map(ii,jj) ~= 5
            cost = 1.5;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end

    % bottom-right
    if (i<nrows && j<ncols) && map((i+1),(j))~=2 && map((i),(j+1))~=2
        ii = i+1; jj = j+1;
        if (map(ii,jj)~=2 && map(ii,jj)~=3) && map(ii,jj) ~= 5
            cost = 1.5;
            if distanceFromStart(ii,jj) > min_dist + cost
                distanceFromStart(ii,jj) = min_dist + cost;

                parent(ii,jj) = current;

                map(ii,jj) = 4;


            end
        end
    end
    %
    %
    numExpanded = numExpanded + 1;

    % Visit each neighbor of the current node and update the map, distances
    % and parent tables appropriately.

    %*********************************************************************

end

%% Construct route from start to dest by following the parent links
if (isinf(distanceFromStart(dest_node)))
    route = [];
else
    route = [dest_node];

    while (parent(route(1)) ~= 0)
        route = [parent(route(1)), route];
    end

    % Snippet of code used to visualize the map and the path
    for k = 2:length(route) - 1
        map(route(k)) = 7;
        pause(0.1);
        image(1.5, 1.5, map);
        grid on;
        axis image;
    end
end

end